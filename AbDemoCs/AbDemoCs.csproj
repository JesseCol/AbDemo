<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows10.0.26100.0</TargetFramework>
    <TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>
    <RootNamespace>AbDemoCs</RootNamespace>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <Platforms>x86;x64;ARM64</Platforms>
    <RuntimeIdentifiers Condition="$([MSBuild]::GetTargetFrameworkVersion('$(TargetFramework)')) &gt;= 8">win-x86;win-x64;win-arm64</RuntimeIdentifiers>
    <RuntimeIdentifiers Condition="$([MSBuild]::GetTargetFrameworkVersion('$(TargetFramework)')) &lt; 8">win10-x86;win10-x64;win10-arm64</RuntimeIdentifiers>
    <PublishProfile>win-$(Platform).pubxml</PublishProfile>
    <UseWinUI>true</UseWinUI>
    <!--<EnableMsixTooling>true</EnableMsixTooling>-->

    <!--A/B loading settings-->
    <WindowsAppSDKDynamicRuntime>true</WindowsAppSDKDynamicRuntime>  <!--New variable--> 
    <WindowsSdkPackageVersion>10.0.19041.38</WindowsSdkPackageVersion>
    <WindowsAppSDKSelfContained>true</WindowsAppSDKSelfContained>
    <WindowsPackageType>None</WindowsPackageType>
    <WindowsAppSdkUndockedRegFreeWinRTInitialize>false</WindowsAppSdkUndockedRegFreeWinRTInitialize>
    <LoaderLocations>$(GeneratedFilesDir)LoaderLocations.cs</LoaderLocations>
    <PrepareForBuildDependsOn>$(PrepareForBuildDependsOn);CreateLoaderLocations</PrepareForBuildDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="Assets\SplashScreen.scale-200.png" />
    <Content Include="Assets\LockScreenLogo.scale-200.png" />
    <Content Include="Assets\Square150x150Logo.scale-200.png" />
    <Content Include="Assets\Square44x44Logo.scale-200.png" />
    <Content Include="Assets\Square44x44Logo.targetsize-24_altform-unplated.png" />
    <Content Include="Assets\StoreLogo.png" />
    <Content Include="Assets\Wide310x150Logo.scale-200.png" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Windows.SDK.BuildTools" Version="10.0.22621.756" />
    <PackageReference Include="Microsoft.WindowsAppSDK" Version="1.6.240923002" />
    <Manifest Include="$(ApplicationManifest)" />
  </ItemGroup>

  <!--
    Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging
    Tools extension to be activated for this project even if the Windows App SDK Nuget
    package has not yet been restored.
  -->
  <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <ProjectCapability Include="Msix" />
  </ItemGroup>
  <ItemGroup>
    <!--Reference loader projects to ensure they're built (dependencies), but ignore their output to avoid build breaks -->
    <!--<ProjectReference Include="..\VersionALoader\VersionALoader.vcxproj" ReferenceOutputAssembly="false" />
    <ProjectReference Include="..\VersionBLoader\VersionBLoader.vcxproj" ReferenceOutputAssembly="false" />-->
  </ItemGroup>

  <!--
    Defining the "HasPackageAndPublishMenuAddedByProject" property here allows the Solution
    Explorer "Package and Publish" context menu entry to be enabled for this project even if
    the Windows App SDK Nuget package has not yet been restored.
  -->
  <PropertyGroup Condition="'$(DisableHasPackageAndPublishMenuAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <HasPackageAndPublishMenu>true</HasPackageAndPublishMenu>
  </PropertyGroup>

    <!--Generate C# source to capture MSBuild paths-->    
    <Target Name="CreateLoaderLocations">
        <PropertyGroup>
            <LoaderALocation>$(SolutionDir)VersionALoader\$(Platform)\$(Configuration)\MsixContent</LoaderALocation>
            <LoaderBLocation>$(SolutionDir)VersionBLoader\$(Platform)\$(Configuration)\MsixContent</LoaderBLocation>
            <LoaderLocationsLines>
namespace $(RootNamespace)
{
    internal static class LoaderLocations
    {
        internal static string LoaderA => @"$(LoaderALocation)"%3b
        internal static string LoaderB => @"$(LoaderBLocation)"%3b
    }
}
            </LoaderLocationsLines>
        </PropertyGroup>
        <WriteLinesToFile File="$(LoaderLocations)" Lines="$(LoaderLocationsLines)" Overwrite="true" WriteOnlyWhenDifferent="true"/>
    </Target>
    
</Project>